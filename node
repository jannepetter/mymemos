----------------------------------------------------------------------------------------------------------
------------------------------------node installaatiot ym--------------------------------------------
----------------------------------------------------------------------------------------------------------

npm init
    -aloittaa uudenprojektin(tekee vain package.json tiedoston kyselyn avulla) 
    -tee ensin projektille kansio ja siellä npm init. (lisää myös tyhjä index.js)
    -syntyy package.json, jonka voit aukaista vaikka vsc. Esim:

{
  "name": "nodemuistio",
  "version": "0.0.1",
  "description": "",
  "main": "index.js",		//määrittelee että ohjelmamme käynnistyspiste on index.js
  "scripts": {
  "start": "node index.js",	//lisätään tämä niin projektin käynnistyksessä voi käyttää npm start
    "test": "echo \\\"Error: no test specified\\\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
/*Skriptejä voi tehdä startin lisäksi muitakin, jotka nopeuttavat toimintaa esim.

"build:ui": "rmdir build /s /q && cd d:/testijs/puhelinluettelo && npm run build --prod 
&& Xcopy D:\\TestiJS\\puhelinluettelo\\build D:\\TestiJS\\backendpuhelinluettelo\\build\\ /e "

kyseinen scripti on tehty buildin päivittämisen helpottamiseksi,kun frontend ja backend on yhdessä ja frontendia
halutaan muokata. Aluksi scripti poistaa backendista build kansion /s tarkoittaa myös subfolderit ja /q quietly eli kyselemättä
&& tarkoittaa siirrytään seuraavaan komentoon. Huomaa Xcopy takakenoviivat. Ne myös täytyy laittaa tuplana ,koska
string ja erikoismerkki. /e tarkoittaa että kopioi kansiot ja niiden alikansiot vaikka olisivat tyhjiä
*/

-node filen voit ajaa paitsi käyttämällä skriptiä, myös komennolla node index.js. Tarkemmin
sanottuna js filen voi ajaa terminaalissa node filennimi.js

npm install express --save
    -express on node web framework, esim rest api endpointtien luomiseksi express routerien avulla
    -tai middlewareksi erilaisten utilssien tai tokenvalidaatioiden kaveriksi ks. EXPRESS ESIM

npm install body-parser --save
    -importti: const bodyParser = require('body-parser')
		-käyttö: app.use(bodyParser.json())	//ota käyttöön suht aikaisin 
		-hyöty on että saat requestin mukana lähetetyt parametrit käyttöön
    -voit käyttää express.json() tämän tilalla, joka tulee expressin mukana nykyään
---
npm install cors --save
    -Cross Origin Resource Sharing. const cors = require('cors')  Käyttö: app.use(cors())
    -ensimmäisenä tai alussa 
---
npm install --save-dev nodemon
    -nodemon kehitysaikaiseksi riippuvuudeksi, server päivittyy muutoksesta
		-"watch": "nodemon index.js" scripteihin (package.json)
		-todennäköistä on että tarvit erilaisia suoritusympäristojä kuten development,test,production.
		-skripti "watch": "NODE_ENV=development nodemon index.js" ei toimi suoraan windowsilla joten tarvit
     jos työskentelet windowsilla cross-env:in.
---
npm install --save-dev cross-env
    -asentaa cross-env,(windosilla välttämätön NODE_ENV lennosta vaihtamiseen)
    -muuta watch skripti sen jälkeen:
		-"watch": "cross-env NODE_ENV=development nodemon index.js"   //skripti package.jsonii
---
npm install --save-dev rimraf	
    -productionbuildin tekemiseen siivoaa entisen buildin ennenkö uutta aletaan tekeen. 
    Pystyisi tekeen normaalisti, mutta tätä mainostivat nopeammaksi.
---
npm install mongoose --save
    -mongodb hommiin
npm install mongoose-unique-validator --save
    -asentaa mongoosen unique validator
---
npm i redis --save
    -jos käyttö epäselvää ks. alhaalta REDIS ESIM.   
---
npm install jsonwebtoken --save
    -Importti: const jwt = require('jsonwebtoken')
		-mahdollistaa tokeniperusteiset tapahtumat salausavaimenavulla, jota tottahantoki säilytetään .env
    kansiossa joka ei missäännimessä ole unohdettu gitignorata. Käyttö esim:
		const JWT_SECRET = 'NEED_HERE_A_SECRET_KEY'    
    const userObjekti={         //täysin itsestä kiinni mitä tokeniin signaa, mutta muista että tokeni on
        id: "123",               //helposti kenen tahansa luettavissa nettikääntäjillä, eli ei arkaluontoista
        username: "keke",        //dataa sinne, kuten salasanoja ym.
        role: "user"
    }
    const token = jwt.sign(userObjekti, JWT_SECRET, { expiresIn: tokenDurationInSeconds })
    (tokeneille kannattaa aina laittaa expiraatio, muuten ne on loputtomiin voimassa tai ainakin siihen
    asti kunnes vaihdat JWT_SECRET salasanan.)
    -Tokenin signaus salasanan tarkistuksen yhteydessä ja tapauksesta riippuen, joko vastauksen mukana  
    takaisin ja localstorageen tai cookiesseina. 
    -Tokenin luku tapauksesta riippuen joko kirjautumista vaativassa kohteessa tai jo middlewaressa.
    -const decodedToken = jwt.verify(tokeniRevittyRequestistaTaiCookiesseistaJne, JWT_SECRET),
    jos verifionti onnistui decodedToken on nyt olemassa ja sisältää tiedot mitä sinne laitettiin
    signauksessa, eli:
    decodedToken.id="123" ja decodedToken.username="keke" jne
---
npm install bcrypt --save     //vaatii stabiilin node version
npm install bcryptjs --save   //käsittääkseni ei mitään eroa tavalliseen bryptiin muuta ku että toimii aina
    -const bcrypt = require('bcryptjs');
    -const saltrounds = 10;
    -const passwordHash = await bcrypt.hash(salasana, saltrounds);
    -mitä isompi saltrounds sen vaikeampi murtaa, ideana on että esim. käyttäjää luodessa,
    salasanat talletetaan kantaan hashattyinä. Ja käyttäjän loggautuessa esim. emailin ja salasanan avulla
    tai käyttäjänimen ja salasanan avulla. Käyttäjä etsitään kannasta annetulla tiedolla ,jonka jälkeen
    verrataan kannasta löytyvää käyttäjää ja sinne talletettua hashattyä salasanaa kirjautumisen
    yhteydessä annettuun salasanaan. Jos salasanat mätsää niin tehdään tokenit tmv.
    -const user = await User.findOne({ email: args.email });
    -const passwordCorrect = await bcrypt.compare(args.password, user.password);
    -keskeytys jos passwordCorrect false
---
npm install apollo-server-express --save
    -jos tarvit express graphql serverissä niin tarvitset myös tämän. Melkein fiksumpi valinta aina laittaa
    tämä, koska depth, speed ja ratelimittiä tarttee aina ja siksi myös express.
    -asenna myös express tämän lisäksi.
    -katso perussetuppi apollo-server-express sivuilta. Setuppi kaikilla herkuilla ks. 
    apollo-server-express ESIM alhaalla.

---
npm install --save apollo-server graphql 
    -asentaa apollo-server kirjaston qraphql palvelimen rakentamiseen
		-importit: const uuid = require('uuid/v1')	//jos tarvii tehä unique id
		-const { ApolloServer, UserInputError, gql } = require('apollo-server')
    -jos ajattelit että saatat jossain vaiheessa tarvita expressiä, skippaa tämä ja asenna
    apollo-server-express. Kivuttomammin saa expressin ja kumppanit sen kylkeen.

---
npm install dotenv --save	
    -require('dotenv').config() As early as possible in your application
    -tee .env filu vaikka vsc new filellä tms. 
    -fiksu systeemi on kerätä kaikki configurointi omaan erilliseen fileen, utils/config
    siellä require('dotenv').config() ,jolloin voit process.envvillä hakea salasanat ym .env
    kansiosta.
    -muista gitignorata .env kansio
    esim utils/config alhaalla
---	
npm i shortid --save
    -const shortid = require('shortid');
    -const iidee = shortid.generate()
    -helppo tapa luoda uniikki key, jos pitää listata itemssejä eikä niillä ole uniikkeja
    ominaisuuksia.
---
npm install cookie-parser --save
    -const cookieParser = require('cookie-parser')
    -käyttö expressissä, app.use(cookieParser())
---
npm install --save dataloader
    -const DataLoader = require('dataloader');
    -const User = require('../models/user');
    -const userLoader = new DataLoader((keys: any[]) => batchUsers(keys, User));
    -dataloaderit laitetaan contextiin
    -ts example batchfunktiosta:
    -const batchUsers = async (keys: any[], User: any) => {
    console.log('userbätsi', keys)
    const users = await User.find({ _id: { '$in': keys } })
    const userMap: { [key: string]:any} = {};
    users.forEach((u:any) => {
      userMap[u.id] = u;
    });
    return keys.map(k => userMap[k]);
    }
    -resolvereista haku:
    -const user = await context.userLoader.load("käyttäjäiidee");
    -const users = await context.userLoader.loadMany(käyttäjäiideelista);
---
npm install --save express-slow-down
    -const slowDown = require("express-slow-down");
    -const speedLimiter = slowDown({
    windowMs: 15 * 60 * 1000, // 15 minutes
    delayAfter: 100, // allow 100 requests per 15 minutes, then...
    delayMs: 500 // begin adding 500ms of delay per request above 100:
    });
    -app.use(speedLimiter);
---
npm install graphql-depth-limit --save
    -const depthLimit = require('graphql-depth-limit')
    -lisäät vain ApolloServerin validationRules:[depthLimit(10)] ja sallittu max syvyys on 10
    -jos epäselvää ks. apollo-server-express ESIM
---
npm i graphql-rate-limit --save
    -import { createRateLimitDirective } from 'graphql-rate-limit';
    -const rateLimitDirective=createRateLimitDirective({ identifyContext: (ctx) => ctx.id });
    -lisäät vain ApolloServerille schemaDirectives: {rateLimit: rateLimitDirective}
    ks. apollo-server-express ESIM
    -helpoin tapa määritellä ratelimitit on määritellä typeDefsii directive ja antaa halutuille
    queryille ja mutaatioille rajoituksensa:
    typeDefs: gql`
    directive @rateLimit(
      max: Int,
      window: String,
      message: String,
      identityArgs: [String],
      arrayLengthField: String
    ) on FIELD_DEFINITION
 
    type Query {
      getItems: [Item] (näin olisi normisti ilman ratelimittejä, toimii samallai mutaatioille)
      getItems: [Item] @rateLimit(window: "1s", max: 5, message: "You are doing that too often.")
    }
  `
---
npm i graphql-validation-complexity --save
    -const { createComplexityLimitRule } = require('graphql-validation-complexity')
    -const ComplexityLimitRule = createComplexityLimitRule(1000, {
    scalarCost: 1,
    objectCost: 1, // Default is 0.
    listFactor: 10, // Default is 10.
    onCost: (cost: any) => {
        console.log('query cost:', cost);
    },
    formatErrorMessage: (cost: any) => (
        `query with cost ${cost} exceeds complexity limit`
    ),
    })
    -lisäät vain ApolloServerin validationRules:[ComplexityLimitRule] 
    -jos epäselvää ks. apollo-server-express ESIM
---
npm install file-system --save
    -jos tarvitsee lukea tiedostoja(sain toimiin tämän vain nodessa)
		-const fs=require('file-system')
    -esim:
    let outp=fs.readFileSync('kakka.txt','utf8').split('\n')
		console.log(outp)
--------------------------------------------------------
EXPRESS ESIM1 käyttö middlewarena graphql serverissä:
---app.js
export{}
const {validateTokensMiddleware} = require('./utils/middleware')
const express = require('express')
const cors = require('cors')
const helmet = require('helmet');           //auttaa suojaamaan express appia, ei välttämätön
const cookieParser = require('cookie-parser')
const {speedLimiter}=require('./utils/security') 
const corsConfig =
    process.env.NODE_ENV !== "production"
        ? {
            origin: "http://localhost:3000",
            credentials: true,
        }
        : {
            origin: "https://your-website.com",
            credentials: true
        };
const app = express();
app.use(helmet());
app.use(speedLimiter)                  //express-slow-down      
app.use(express.json())                     //korvaa body-parserin, jota tarvitaan express req kirjoittamiseen (tässävaiheessa)
app.use(cookieParser())
app.use(cors(corsConfig));
app.use(validateTokensMiddleware);
module.exports=app
*/
----------------------------------------------
EXPRESS ESIM2 resp api serverinä:
---app.js
const express = require('express')
const blogRouter = require('./controllers/blogs') //rakennettu expressin avulla ks. express esim.3
const userRouter = require('./controllers/users') //voi olla useampia endpointseja
const cors = require('cors')
const app = express()
app.use(cors())
app.use(express.json())                     //voit korvata bodyparserin tällä
app.use('/api/blogs', blogRouter) //routereihin eristetty omat get,post,delete,put ym muut
app.use('/api/users', userRouter) 
module.exports = app

----------------------------------------------
EXPRESS ESIM3 resp api serverinä/routterit:
---controllers/blogs.js
const Blog = require('../models/blog')      //mongoose model
const blogRouter = require('express').Router()
blogRouter.get('/', async (request, response, next) => {    //get komennot /api/blogs/ osuvat tähän
  try {
    const blogs = await Blog.find({})
    response.json(blogs)
  } catch (e) {
    next(e)
  }
})

blogRouter.post('/', async (request, response, next) => {   //post komennot /api/blogs/ osuvat tähän
  const body = request.body         //bodyparserin tai express.jsonin avulla päästään req parametreihin
                                    //käsiksi
  if (body.title === '' ) {
    return response.status(400).json({ error: 'title missing' })
  }
  try {
    const blog = new Blog({
      title: body.title,   
    })
    const savedBlog = await blog.save()
    response.status(201).json(savedBlog.toJSON())
  } catch (error) {
    next(error)
  }
})
module.exports = blogRouter

-------------------------------------------------
---apollo-server-express ESIM:
---index.js
const config = require('./utils/config');     //dotenv stuffia omassa config filussa
const DataLoader = require('dataloader');
const app = require('./app');                 //express omassa filussa
const resolvers = require('./schema/resolvers');
const typeDefs = require('./schema/typedefs');
const { batchRecipes, batchUsers } = require('./utils/dataloaderBatches');

const { ApolloServer, gql } = require('apollo-server-express');
import { createServer } from 'http';

const {
  ComplexityLimitRule,        //graphql-validation-complexity
  depthLimiter,               //graphql-depth-limit
  rateLimitDirective          //graphql-rate-limit
} = require('./utils/security');

const mongoose = require('mongoose');
const Recipe = require('./models/recipe');
const User = require('./models/user');

const MONGODB_URI = config.MONGOURL;
mongoose
  .connect(MONGODB_URI, config.MONGOCONFIG)
  .then(() => {
    console.log('connected to MongoDB');
  })
  .catch((error: any) => {
    console.log('error connection to MongoDB:', error.message);
  });

const server = new ApolloServer({
  schemaDirectives: {
    rateLimit: rateLimitDirective
  },
  typeDefs,
  resolvers,                          //redis utilsien kautta suoraan resolversii
  validationRules: [depthLimiter, ComplexityLimitRule],

  context: async ({ req, res }: any) => {
    const userLoader = new DataLoader((keys: any[]) => batchUsers(keys, User));
    const recipeLoader = new DataLoader((keys: any[]) =>
      batchRecipes(keys, Recipe)
    );
    return { req, res, userLoader, recipeLoader };
  },
  cors: false                                 //setuppi käyttää jo corsia appissa, tämä falseksi
});
server.applyMiddleware({ app, cors: false }); //setuppi käyttää jo corsia appissa, tämä falseksi
const httpServer = createServer(app);
server.installSubscriptionHandlers(httpServer);
const PORT = config.PORT;
httpServer.listen(PORT, () => {
  console.log(`Server ready at: ${PORT}${server.graphqlPath}`);
});

-------------------------------------------------------
---esim utils/config.js:
require('dotenv').config();         
const tokenTime = 60 * 15;
let MONGOURL = process.env.MONGOURL;
const MONGOCONFIG = {
  useNewUrlParser: true,
  useFindAndModify: false,
  useCreateIndex: true,
  useUnifiedTopology: true
};
let PORT = process.env.PORT;
const JWT_SECRET=process.env.JWT_SECRET

if (process.env.NODE_ENV === 'test') {
  console.log('env', process.env.NODE_ENV);
  MONGOURL = process.env.TEST_MONGOURL;
}
module.exports = {
  tokenTime,
  MONGOURL,
  MONGOCONFIG,
  PORT,
  JWT_SECRET
};
--------------------------------------------------------
REDIS ESIM:
---utils/redis.ts
export { }
const config = require('./config')
const { promisify } = require('util');
const redis = require('redis');
export const client = redis.createClient(config.REDISPORT, config.REDISURL, { no_ready_check: true });
client.auth(config.REDISPASSWORD, function (err: any) {
    if (err) {
        throw new Error('rediserror')
    }
});
const getAsync = promisify(client.get).bind(client);
const setAsync = promisify(client.set).bind(client);
const removeAsync = promisify(client.del).bind(client);
client.on('error', function (err: any) {
    console.log('Error ' + err);
});
client.on('connect', function () {
    console.log('Connected to Redis');
    client.flushall('ASYNC')        //poistaa kaikki redisistä kun servu käynnistyy (ei pakollinen)
});
export const findredis = async (key: any) => {
    client.unref();
    const found = await getAsync(key);
    console.log('etsii redis')
    if (found) {
        console.log('löyty redis')
        return JSON.parse(found)
    } else {
        console.log('ei löydy redis')
        return null
    }
}
export const setredis = async (key: any, value: any, exp = 60 * 60 * 24) => {
    client.unref();
    await setAsync(key, JSON.stringify(value), 'EX', exp)
}
export const delredis = async (key: any) => {
    client.unref();
    await removeAsync(key)
}
//importtaus: const { client, findredis, setredis, delredis } = require('../utils/redis')
------------------------------------------------------------